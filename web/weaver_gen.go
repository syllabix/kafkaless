//go:build !ignoreWeaverGen

package web

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"errors"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)
var _ codegen.LatestVersion = codegen.Version[[0][11]struct{}]("You used 'weaver generate' codegen version 0.11.0, but you built your code with an incompatible weaver module version. Try upgrading 'weaver generate' and re-running it.")

func init() {
	codegen.Register(codegen.Registration{
		Name:        "github.com/syllabix/kafkaless/web/Server",
		Iface:       reflect.TypeOf((*Server)(nil)).Elem(),
		Impl:        reflect.TypeOf(server{}),
		LocalStubFn: func(impl any, tracer trace.Tracer) any { return server_local_stub{impl: impl.(Server), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return server_client_stub{stub: stub, shutdownMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/syllabix/kafkaless/web/Server", Method: "Shutdown"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return server_server_stub{impl: impl.(Server), addLoad: addLoad}
		},
		RefData: "⟦9589faf7:wEaVeReDgE:github.com/syllabix/kafkaless/web/Server→github.com/syllabix/kafkaless/producer/Service⟧\n⟦8f9cb347:wEaVeRlIsTeNeRs:github.com/syllabix/kafkaless/web/Server→api⟧\n",
	})
}

// weaver.Instance checks.
var _ weaver.InstanceOf[Server] = (*server)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*server)(nil)

// Local stub implementations.

type server_local_stub struct {
	impl   Server
	tracer trace.Tracer
}

// Check that server_local_stub implements the Server interface.
var _ Server = (*server_local_stub)(nil)

func (s server_local_stub) Shutdown(ctx context.Context) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "web.Server.Shutdown", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Shutdown(ctx)
}

// Client stub implementations.

type server_client_stub struct {
	stub            codegen.Stub
	shutdownMetrics *codegen.MethodMetrics
}

// Check that server_client_stub implements the Server interface.
var _ Server = (*server_client_stub)(nil)

func (s server_client_stub) Shutdown(ctx context.Context) (err error) {
	// Update metrics.
	start := time.Now()
	s.shutdownMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "web.Server.Shutdown", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.shutdownMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.shutdownMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	var shardKey uint64

	// Call the remote method.
	s.shutdownMetrics.BytesRequest.Put(0)
	var results []byte
	results, err = s.stub.Run(ctx, 0, nil, shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.shutdownMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

// Server stub implementations.

type server_server_stub struct {
	impl    Server
	addLoad func(key uint64, load float64)
}

// Check that server_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*server_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s server_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Shutdown":
		return s.shutdown
	default:
		return nil
	}
}

func (s server_server_stub) shutdown(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Shutdown(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}
